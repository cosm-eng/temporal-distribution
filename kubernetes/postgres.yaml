---
# Source: temporal/templates/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: temporal-default-store
  namespace: temporal-system
  labels:
    app.kubernetes.io/name: temporal
    helm.sh/chart: temporal-0.18.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: temporal
    app.kubernetes.io/version: 1.18.0
    app.kubernetes.io/part-of: temporal
type: Opaque
data:
  dbname: "dGVtcG9yYWwK"
  user: "dGVtcG9yYWwK"
  password: "cGFzc3dvcmQ="
---
# Source: temporal/templates/server-secret.yaml
apiVersion: v1
kind: Secret
metadata:
  name: temporal-visibility-store
  namespace: temporal-system
  labels:
    app.kubernetes.io/name: temporal
    helm.sh/chart: temporal-0.18.0
    app.kubernetes.io/managed-by: Helm
    app.kubernetes.io/instance: temporal
    app.kubernetes.io/version: 1.18.0
    app.kubernetes.io/part-of: temporal
type: Opaque
data:
  dbname: "dGVtcG9yYWxfdmlzaWJpbGl0eQo="
  user: "dGVtcG9yYWxfdmlzaWJpbGl0eQo="
  password: "cGFzc3dvcmQ="
---
apiVersion: v1
kind: Secret
metadata:
  name: postgres
  namespace: temporal-system
  labels:
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: postgres
type: Opaque
data:
  user: "cG9zdGdyZXMK"
  password: "cG9zdGdyZXMK"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: postgres-init-config
  namespace: temporal-system
  labels:
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: postgres
data:
  init.sh: |-
    #!/bin/bash
    set -e

    psql -v ON_ERROR_STOP=1 --username "$POSTGRES_USER" --dbname postgres <<-EOSQL
    	CREATE USER temporal WITH PASSWORD 'password';
    	CREATE DATABASE temporal;
    	GRANT ALL PRIVILEGES ON DATABASE temporal TO temporal;
    
        CREATE USER temporal_visibility WITH PASSWORD 'password';
        CREATE DATABASE temporal_visibility;
        GRANT ALL PRIVILEGES ON DATABASE temporal_visibility TO temporal_visibility;
    EOSQL
---
apiVersion: v1
kind: Service
metadata:
  name: temporal-postgres
  namespace: temporal-system
  labels:
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: postgres
spec:
  ports:
    - port: 5432
  selector:
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: postgres
  clusterIP: None
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: postgres-pv-claim
  namespace: temporal-system
  labels:
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: postgres
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 5Gi
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: temporal-postgres
  namespace: temporal-system
  labels:
    app.kubernetes.io/name: temporal
    app.kubernetes.io/instance: postgres
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: temporal
      app.kubernetes.io/instance: postgres
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: temporal
        app.kubernetes.io/instance: postgres
    spec:
      containers:
        - image: postgres:14.5-alpine
          name: postgres
          env:
            - name: POSTGRES_USER
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: user
            - name: POSTGRES_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres
                  key: password
          ports:
            - containerPort: 5432
              name: postgres
          volumeMounts:
            - name: postgres-persistent-storage
              mountPath: /var/lib/postgres/data
            - name: postgres-init-scripts
              mountPath: /docker-entrypoint-initdb.d
      volumes:
        - name: postgres-persistent-storage
          persistentVolumeClaim:
            claimName: postgres-pv-claim
        - name: postgres-init-scripts
          configMap:
            name: postgres-init-config
